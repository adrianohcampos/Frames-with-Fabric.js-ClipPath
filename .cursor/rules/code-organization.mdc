---
globs: *.js
description: Organiza√ß√£o e estrutura de c√≥digo JavaScript
---

# Organiza√ß√£o de C√≥digo

## Estrutura de Arquivo JavaScript
```javascript
// 1. DECLARA√á√ïES GLOBAIS no topo
const canvas = new fabric.Canvas('canvas');
let activeFrame = null;

// 2. CONSTANTES E CONFIGURA√á√ïES
const DEFAULT_FRAME_CONFIG = {
    left: 200,
    top: 200,
    opacity: 0.5,
    originX: 'center',
    originY: 'center'
};

// 3. FUN√á√ïES UTILIT√ÅRIAS (helpers)
function createClipPath(frameType, width, height, frame = null) {
    // Implementa√ß√£o...
}

function getFrameDimensions(frame) {
    // Implementa√ß√£o...
}

// 4. FUN√á√ïES PRINCIPAIS
function addFrame(type) {
    // Implementa√ß√£o...
}

function addImage(imageUrl) {
    // Implementa√ß√£o...
}

// 5. EVENT LISTENERS no final
canvas.on('selection:created', function(e) {
    // Implementa√ß√£o...
});
```

## Agrupamento de Fun√ß√µes por Responsabilidade

### üìê Fun√ß√µes de Frame
```javascript
// Todas as fun√ß√µes relacionadas a frames juntas
function addFrame(type) { /* */ }
function removeFrame(frame) { /* */ }
function updateFrame(frame, properties) { /* */ }
```

### üñºÔ∏è Fun√ß√µes de Imagem
```javascript
// Todas as fun√ß√µes relacionadas a imagens juntas
function addImage(imageUrl) { /* */ }
function uploadImage(event) { /* */ }
function cropImage(image, bounds) { /* */ }
```

### ‚úÇÔ∏è Fun√ß√µes de ClipPath
```javascript
// Todas as fun√ß√µes relacionadas a clipPath juntas
function createClipPath(frameType, width, height) { /* */ }
function updateClipPath(object, newDimensions) { /* */ }
```

### üéØ Fun√ß√µes de Edi√ß√£o
```javascript
// Todas as fun√ß√µes relacionadas ao modo de edi√ß√£o juntas
function enterEditMode() { /* */ }
function exitEditMode() { /* */ }
function setupCroppingHandlers(image) { /* */ }
```

## Conven√ß√µes de Coment√°rios
```javascript
// ‚úÖ Bom - coment√°rio descritivo para fun√ß√µes complexas
/**
 * Cria um clipPath baseado no tipo de frame
 * @param {string} frameType - Tipo do frame (circle, rect, etc.)
 * @param {number} width - Largura do clipPath
 * @param {number} height - Altura do clipPath
 * @param {fabric.Object} frame - Refer√™ncia do frame (opcional)
 * @returns {fabric.Object} - Objeto clipPath configurado
 */
function createClipPath(frameType, width, height, frame = null) {
    // Implementa√ß√£o...
}

// ‚úÖ Bom - coment√°rio para se√ß√µes de c√≥digo
// Configure cropping mode as in crop.html
canvas.remove(originalGroup);
canvas.add(shapeRef);
canvas.add(img);

// ‚úÖ Bom - coment√°rio explicativo para c√°lculos complexos
// Uniform scale (cover) and clipPath in non-scaled image coordinates
const scale = Math.max(targetWidth / img.width, targetHeight / img.height);
```

## Separa√ß√£o de Responsabilidades

### ‚úÖ Uma fun√ß√£o, uma responsabilidade
```javascript
// ‚úÖ Bom - fun√ß√£o espec√≠fica
function getFrameDimensions(frame) {
    switch (frame.type) {
        case 'circle':
            return { width: frame.radius * 2, height: frame.radius * 2 };
        // ... outros casos
    }
}

// ‚úÖ Bom - fun√ß√£o espec√≠fica
function validateActiveFrame() {
    if (!activeFrame) {
        alert('Please select or add a frame first!');
        return false;
    }
    return true;
}
```

### ‚ùå Evite fun√ß√µes muito grandes
```javascript
// ‚ùå Ruim - fun√ß√£o fazendo muitas coisas
function addImageToFrame(imageUrl, frameType, position, scale) {
    // 50+ linhas fazendo m√∫ltiplas responsabilidades
    // Melhor dividir em fun√ß√µes menores
}
```

## Padr√£o de Inicializa√ß√£o
```javascript
// ‚úÖ Bom - fun√ß√£o de inicializa√ß√£o limpa
function initializeCanvas() {
    const canvas = new fabric.Canvas('canvas', {
        width: 800,
        height: 600
    });
    
    setupCanvasEvents(canvas);
    setupKeyboardShortcuts();
    return canvas;
}

function setupCanvasEvents(canvas) {
    canvas.on('selection:created', handleSelectionCreated);
    canvas.on('selection:cleared', handleSelectionCleared);
}
```

## Manejo de Estados
```javascript
// ‚úÖ Bom - objeto para gerenciar estado
const appState = {
    activeFrame: null,
    editMode: false,
    selectedTool: 'select'
};

function updateAppState(newState) {
    Object.assign(appState, newState);
    renderUI();
}
```

## Exemplo de Estrutura Ideal
```javascript
// === GLOBALS ===
const canvas = new fabric.Canvas('canvas');
let activeFrame = null;

// === CONSTANTS ===
const FRAME_DEFAULTS = { /* */ };
const SUPPORTED_FRAMES = ['circle', 'rect', 'triangle'];

// === UTILITIES ===
function createClipPath() { /* */ }
function getFrameDimensions() { /* */ }
function validateFrame() { /* */ }

// === FRAME OPERATIONS ===
function addFrame() { /* */ }
function removeFrame() { /* */ }

// === IMAGE OPERATIONS ===
function addImage() { /* */ }
function uploadImage() { /* */ }

// === EDIT MODE ===
function enterEditMode() { /* */ }
function exitEditMode() { /* */ }

// === EVENT HANDLERS ===
function handleSelectionCreated() { /* */ }
function handleSelectionCleared() { /* */ }

// === INITIALIZATION ===
canvas.on('selection:created', handleSelectionCreated);
canvas.on('selection:cleared', handleSelectionCleared);
```